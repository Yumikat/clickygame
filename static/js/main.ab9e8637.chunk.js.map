{"version":3,"sources":["components/CatCard/index.js","components/Wrapper/index.js","components/Jumbotron/index.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["CatCard","props","react_default","a","createElement","className","src","image","alt","name","onClick","kittenClicked","id","Wrapper","children","Jumbotron","guess","score","topScore","Footer","class","App","state","cats","kittenId","handleScore","newScore","_this","setState","alert","shuffle","kittenArray","i","j","temp","length","Math","floor","random","includes","console","log","push","_this2","this","components_Jumbotron","components_Wrapper","map","cat","components_CatCard","key","url","components_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"k3FAqBeA,MAZf,SAAiBC,GAEb,OACQC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAKL,EAAMM,MAAOC,IAAKP,EAAMQ,KAAMJ,UAAU,YAC9CK,QAAS,kBAAMT,EAAMU,cAAcV,EAAMW,uBCRlDC,MAJf,SAAiBZ,GACb,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMa,iBCY5BC,MAbf,SAAmBd,GACf,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,sBACAH,EAAAC,EAAAC,cAAA,oDACAF,EAAAC,EAAAC,cAAA,SAAIH,EAAMe,OACVd,EAAAC,EAAAC,cAAA,mBAAWH,EAAMgB,MAAjB,iBAAsChB,EAAMiB,mBCE7CC,MATf,SAAgBlB,GACZ,OACIC,EAAAC,EAAAC,cAAA,OAAKgB,MAAM,UACPlB,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,KAAGgB,MAAM,eAAZ,kCC0FGC,oNAxFbC,MAAQ,CACNC,OACAN,MAAO,EACPC,SAAU,EACVM,SAAU,GACVR,MAAO,MAGTS,YAAc,WACZ,IAAIC,EAAWC,EAAKL,MAAML,MAAQ,EAClCU,EAAKC,SAAS,CACZX,MAAOS,EACPV,MAAO,0BAELU,EAAWC,EAAKL,MAAMJ,WACxBS,EAAKC,SAAS,CACZV,SAAUQ,IAEK,KAAbA,IACFG,MAAK,+BACLF,EAAKC,SAAS,CACZZ,MAAO,oBAMfc,QAAU,SAAAC,GACR,IAAIC,EAAI,EAAGC,EAAI,EAAGC,EAAO,KAEzB,IAAKF,EAAID,EAAYI,OAAS,EAAGH,EAAI,EAAGA,GAAK,EAC3CC,EAAIG,KAAKC,MAAMD,KAAKE,UAAYN,EAAI,IACpCE,EAAOH,EAAYC,GACnBD,EAAYC,GAAKD,EAAYE,GAC7BF,EAAYE,GAAKC,EAEnB,OAAOH,KAGTpB,cAAgB,SAAAC,GACTe,EAAKL,MAAME,SAASe,SAAS3B,IAShCiB,MAAK,oBACLF,EAAKC,SAAS,CACZX,MAAO,EACPO,SAAU,GACVD,KAAMI,EAAKG,QAAQH,EAAKL,MAAMC,MAC9BP,MAAO,4BAETwB,QAAQC,IAAId,EAAKL,MAAME,YAfvBG,EAAKL,MAAME,SAASkB,KAAK9B,GACzB4B,QAAQC,IAAId,EAAKL,MAAME,UACvBG,EAAKF,cACLE,EAAKC,SAAS,CACZL,KAAMI,EAAKG,QAAQH,EAAKL,MAAMC,kFAe3B,IAAAoB,EAAAC,KACP,OACE1C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACyC,EAAD,CACE5B,MAAO2B,KAAKtB,MAAML,MAClBC,SAAU0B,KAAKtB,MAAMJ,SACrBF,MAAO4B,KAAKtB,MAAMN,QAEpBd,EAAAC,EAAAC,cAAC0C,EAAD,KACE5C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACZuC,KAAKtB,MAAMC,KAAKwB,IAAI,SAAAC,GAAG,OACtB9C,EAAAC,EAAAC,cAAC6C,EAAD,CACEtC,cAAegC,EAAKhC,cACpBC,GAAIoC,EAAIpC,GACRsC,IAAKF,EAAIpC,GACTH,KAAMuC,EAAIvC,KACVF,MAAOyC,EAAIzC,MACX4C,IAAKH,EAAIG,UAKjBjD,EAAAC,EAAAC,cAACgD,EAAD,cAnFUC,oBCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1D,EAAAC,EAAAC,cAACyD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ab9e8637.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n// var x = document.getElementById(\"kittenMeow\");\r\n// var audio = document.getElementById(\"kittenMeow\");\r\n// document.getElementById(\".card\").onmouseenter(function() {\r\n//     audio.onplay();\r\n// });\r\n\r\nfunction CatCard(props) {\r\n    // console.log(props);\r\n    return (\r\n            <div className=\"card\">\r\n                <div className=\"img-container\">\r\n                    <img src={props.image} alt={props.name} className=\"clickItem\"\r\n                        onClick={() => props.kittenClicked(props.id)} />\r\n                </div>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default CatCard;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n    return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Jumbotron(props) {\r\n    return (\r\n        <div className=\"jumbotron\" >\r\n            <div className=\"container\">\r\n                <h1 className=\"display-4\">Kitten Clicky Game</h1>\r\n                <p>Click on an image once to score points!</p>\r\n                <p>{props.guess}</p>\r\n                <p>Score: {props.score} | Top Score: {props.topScore}</p>\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Jumbotron;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Footer(props) {\r\n    return (\r\n        <div class=\"footer\">\r\n            <p>Kitten Clicky Game</p>\r\n            <p><i class=\"fas fa-cat\"></i> Made by Pidchaya Prindavong</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer;\r\n","import React, { Component } from 'react';\nimport CatCard from \"./components/CatCard\";\nimport cats from \"./cats.json\";\nimport Wrapper from \"./components/Wrapper\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport Footer from \"./components/Footer\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    cats,\n    score: 0,\n    topScore: 0,\n    kittenId: [],\n    guess: \"\"\n  };\n\n  handleScore = () => {\n    let newScore = this.state.score + 1;\n    this.setState({\n      score: newScore,\n      guess: \"You guessed correctly\"\n    });\n    if (newScore > this.state.topScore) {\n      this.setState({\n        topScore: newScore\n      });\n      if (newScore === 16) {\n        alert(`Congrats, you won the game!`);\n        this.setState({\n          guess: \"You won!!!\"\n        });\n      }\n    }\n  }\n\n  shuffle = kittenArray => {\n    var i = 0, j = 0, temp = null\n\n    for (i = kittenArray.length - 1; i > 0; i -= 1) {\n      j = Math.floor(Math.random() * (i + 1))\n      temp = kittenArray[i]\n      kittenArray[i] = kittenArray[j]\n      kittenArray[j] = temp\n    }\n    return kittenArray\n  }\n\n  kittenClicked = id => {\n    if (!this.state.kittenId.includes(id)) {\n      this.state.kittenId.push(id);\n      console.log(this.state.kittenId);\n      this.handleScore();\n      this.setState({\n        cats: this.shuffle(this.state.cats)\n      });\n    } \n    else {\n      alert(`Sorry, you lose!`);\n      this.setState({\n        score: 0,\n        kittenId: [],\n        cats: this.shuffle(this.state.cats),\n        guess: \"You guessed incorrectly\",\n      });\n      console.log(this.state.kittenId);\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Jumbotron\n          score={this.state.score}\n          topScore={this.state.topScore}\n          guess={this.state.guess}\n        />\n        <Wrapper >\n          <div className=\"App\">\n            {this.state.cats.map(cat => (\n              <CatCard\n                kittenClicked={this.kittenClicked}\n                id={cat.id}\n                key={cat.id}\n                name={cat.name}\n                image={cat.image}\n                url={cat.url}\n              />\n            ))}\n          </div>\n        </Wrapper>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport \"./index.css\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}